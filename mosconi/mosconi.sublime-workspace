{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"whe",
				"WheelDown"
			],
			[
				"whee",
				"WheelUp"
			],
			[
				"pg",
				"PgDn"
			],
			[
				"pd",
				"ped"
			],
			[
				"vol",
				"Volume_Down"
			],
			[
				"Vol",
				"Volume_Up"
			],
			[
				"Whe",
				"WheelUp"
			],
			[
				"Wheel",
				"WheelDown"
			],
			[
				"altup",
				"AltUp}\t{AltUp}"
			],
			[
				"ctrl",
				"CtrlUp}\t{CtrlUp}"
			],
			[
				"tab",
				"Tab"
			],
			[
				"CtrlDown",
				"CtrlDown}\t{CtrlDown}"
			],
			[
				"altdo",
				"AltDown}\t{AltDown}"
			],
			[
				"Whee",
				"WheelDown"
			],
			[
				"xbu",
				"XButton2"
			],
			[
				"x",
				"XButton1"
			],
			[
				"WinM",
				"WinMinimize"
			],
			[
				"instl",
				"InstallMouseHook\t#InstallMouseHook"
			],
			[
				"sing",
				"SingleInstance\t#SingleInstance"
			],
			[
				"splash",
				"SplashTextOff"
			],
			[
				"spla",
				"SplashTextOn"
			],
			[
				"Minimi",
				"MinimizeBox"
			],
			[
				"file",
				"file_include_patterns"
			],
			[
				"fo",
				"folder_exclude_patterns"
			],
			[
				"wr",
				"write\tfunction"
			],
			[
				"add",
				"add_argument\tfunction"
			],
			[
				"__",
				"__file__\tinstance"
			],
			[
				"example",
				"example_poop"
			],
			[
				"exampl",
				"example_string"
			],
			[
				"day",
				"day_\tstatement"
			],
			[
				"doom",
				"doomsday\tstatement"
			],
			[
				"date",
				"dateinfo\tstatement"
			],
			[
				"inter",
				"integer"
			],
			[
				"str",
				"string\tparam"
			],
			[
				"dat",
				"date_parser"
			],
			[
				"grou",
				"group"
			],
			[
				"head",
				"headers"
			],
			[
				"hea",
				"headers"
			],
			[
				"rea",
				"read_csv\tfunction"
			],
			[
				"K",
				"KNeighborsClassifier\timport"
			],
			[
				"line",
				"line_contents\tstatement"
			],
			[
				"s",
				"str\tstrrep"
			],
			[
				"f",
				"f_contents\tstatement"
			],
			[
				"top",
				"top_100\tstatement"
			],
			[
				"sc",
				"scatter\tfunction"
			],
			[
				"Ivy",
				"Ivy_League"
			],
			[
				"grea",
				"great_income\tstatement"
			],
			[
				"teachin",
				"teaching_and_total\tstatement"
			],
			[
				"great",
				"great_total"
			],
			[
				"ivy",
				"ivy_schools\tstatement"
			],
			[
				"b",
				"BeautifulSoup\tclass"
			],
			[
				"next",
				"next_date"
			],
			[
				"nex",
				"next_unix\tstatement"
			],
			[
				"fore",
				"forecast_set\tstatement"
			],
			[
				"last",
				"last_unix"
			],
			[
				"forecas",
				"forecast_out\tstatement"
			],
			[
				"drop",
				"dropna"
			],
			[
				"cross",
				"cross_validation\tmodule"
			],
			[
				"foreca",
				"forecast_out\tstatement"
			],
			[
				"html",
				"html_page\tstatement"
			],
			[
				"au",
				"author"
			],
			[
				"DATA",
				"DATAFILE\tstatement"
			],
			[
				"Di",
				"DictReader\tclass"
			],
			[
				"inf",
				"infsumdict\tstatement"
			],
			[
				"di",
				"dic_t\tstatement"
			],
			[
				"dic",
				"dic_rc34\tstatement"
			],
			[
				"matri",
				"matrix34"
			],
			[
				"pre",
				"prev_col_temp"
			],
			[
				"prev",
				"prev_row_temp"
			],
			[
				"row",
				"row_num"
			],
			[
				"col",
				"col_num"
			],
			[
				"ro",
				"row_num\tforstmt"
			],
			[
				"sle",
				"self_looped\tstatement"
			],
			[
				"lcm",
				"lcm\tfunction"
			],
			[
				"l",
				"lcm2\tfunction"
			],
			[
				"num",
				"numerators\tstatement"
			],
			[
				"denom",
				"denominators\tstatement"
			],
			[
				"n",
				"numerator"
			],
			[
				"frac",
				"Fraction\tclass"
			],
			[
				"sub",
				"subelem\tforstmt"
			],
			[
				"L",
				"lstrip\tfunction"
			],
			[
				"len",
				"length\tstatement"
			],
			[
				"in",
				"index\tfunction"
			],
			[
				"base",
				"base10toN\tfunction"
			],
			[
				"re",
				"replace\tfunction"
			],
			[
				"down",
				"download_file_from_google_drive\tfunction"
			],
			[
				"array",
				"array2\tstatement"
			],
			[
				"rd",
				"rd\tfunction"
			],
			[
				"readfile",
				"readfile2"
			],
			[
				"read",
				"readfile\tparam"
			],
			[
				"arr",
				"array2\tstatement"
			],
			[
				"fin",
				"filename"
			],
			[
				"full",
				"fullmeld_contents\tstatement"
			],
			[
				"hash",
				"hash_contents\tstatement"
			],
			[
				"exc",
				"Exception\tclass"
			],
			[
				"new",
				"new_contents\tstatement"
			],
			[
				"req",
				"request"
			],
			[
				"chunk",
				"chunk_size"
			],
			[
				"try",
				"try\tTry/Except"
			],
			[
				"finda",
				"find_all\tfunction"
			],
			[
				"spac",
				"word-spacing"
			],
			[
				"tex",
				"text-align"
			],
			[
				"fon",
				"font-size"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/C/Users/andrew/Desktop/mosconi/manual_scrape_cleaned_2014.txt",
			"settings":
			{
				"buffer_size": 902,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/andrew/Desktop/mosconi/euro_players_scrape.txt",
			"settings":
			{
				"buffer_size": 907,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "Ralf Souquet     Germany"
			}
		},
		{
			"file": "/C/Users/andrew/Desktop/mosconi/am_players_scrape.txt",
			"settings":
			{
				"buffer_size": 1064,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "Johnny Archer    Georgia"
			}
		},
		{
			"file": "/C/Users/andrew/Desktop/mosconi/split_players.py",
			"settings":
			{
				"buffer_size": 311,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n# coding: utf-8\n\n# In[451]:\n\ndef createlinks(start,end):\n    base = 'https://en.wikipedia.org/wiki/'\n    tails=[]\n    for i in range(int(start),int(end)):\n        tails.append('{}_Mosconi_Cup'.format(i))\n    links=[base+tail for tail in tails]\n    return(links)\n\n\n# In[454]:\n\ndef createtables(url):\n    page = requests.get(url)\n    tree = html.fromstring(page.text)\n    tables = tree.xpath('//table')\n    tables=[table for table in tables if(table[0].text_content().replace('\\n','')=='Results')]\n    return(tables)\n\n\n# In[487]:\n\ndef createdf(tables):\n    import re\n    l=[]\n    col=['Format','European_player','European_score','American_score','American_player']\n\n    for i in range(len(tables)+1):\n        for j in range(1,6):\n            try:\n                element=tables[i][j].text_content().replace(\"\\n\", \" \")\n                match = re.match(r\"\\s?(\\w+)\\s(.+)\\s([0-9])[–]([0-9])\\s?\\w+\\s?(.+)\\s\", element)\n                if match:\n                    l.append(list(match.groups()))\n            except:\n                pass\n    df=pd.DataFrame(l,columns=col)\n    return(df)\n\n\n# In[664]:\n\ndef main():\n    from lxml import html\n    import requests\n    import pandas as pd\n    df = pd.DataFrame()\n    links = createlinks('1998','2014')\n    for url in links:\n        tables = createtables(url)\n        newdf = createdf(tables) \n        df=df.append(newdf)\n    return(df)\n\n\n# In[706]:\n\ndf2015= main_bw()\n\n\n# In[665]:\n\ndf=main()\n\n\n# In[708]:\n\nframes=[df,df2015]\ndf=pd.concat(frames)\n\n\n# In[710]:\n\npkl=r'C:\\Users\\andrew\\Desktop\\mosconi\\mosconi_1998_2015_pkls'\ndf.to_pickle(pkl)\n\n\n# Missing 2014 data. Can get it from: http://www.matchroompool.com/mosconi-cup/mosconi-cup-xxi/#fixtures\n# compare stats here:\n# http://forums.azbilliards.com/showthread.php?t=439775&page=4\n\n# In[569]:\n\nimport re\nl=[]\nwith open('manual_scrape_cleaned_2014.txt','r') as rf:\n    for line in rf:\n        match = re.match(r\"(\\w+)\\s(.+)\\s([0-9])\\s?[-]\\s?([0-9])\\s?(.+)\", line)\n        if match:\n            l.append(list(match.groups()))\n\n\n# In[583]:\n\ndf=pd.read_pickle(pkl)\n\n\n# In[670]:\n\ndf2=pd.DataFrame(l,columns=col)\n\n\n# In[671]:\n\nframes=[df,df2]\ndf=pd.concat(frames)\n\n\n# In[672]:\n\ndf['Europe_won']=df.European_score>df.American_score\n\n\n# In[674]:\n\npkl=r'C:\\Users\\andrew\\Desktop\\mosconi\\mosconi_1998_2014_inc_pkls'\ndf.to_pickle(pkl)\n\n\n# In[2]:\n\ncols= ['Format','European_player','European_score','American_score','American_player','Europe_won']\ndf=df[cols]\n\n\n# 2015 Data is backwards, need to fix the order (european player should be first)\n\n# In[705]:\n\ndef createdf_bw(tables):\n    import re\n    l=[]\n    col=['Format','European_player','European_score','American_score','American_player']\n\n    for i in range(len(tables)+1):\n        for j in range(1,6):\n            try:\n                element=tables[i][j].text_content().replace(\"\\n\", \" \")\n                match = re.match(r\"\\s?(\\w+)\\s(.+)\\s([0-9])[–]([0-9])\\s?\\w+\\s?(.+)\\s\", element)\n                if match:\n                    print('ok')\n                    lst=[match.group(1), match.group(5), match.group(4), match.group(3), match.group(2)]\n                    print(lst)\n                    l.append(lst)\n                else:\n                    print('fail')\n            except:\n                pass\n    print(l)\n    df=pd.DataFrame(l,columns=col)\n    return(df)\n\n\n# In[701]:\n\ndef main_bw():\n    from lxml import html\n    import requests\n    import pandas as pd\n    df = pd.DataFrame()\n    links = createlinks('2015','2016')\n    for url in links:\n        tables = createtables(url)\n        newdf = createdf_bw(tables) \n        df=df.append(newdf)\n    return(df)\n\n\n\nsvb = df['American_player'].str.contains('Shane Van Boening')\n\n\nearl = df['American_player'].str.contains('Earl Strickland')\n\n\nhatch = df['American_player'].str.contains('Dennis Hatch')\n\n\nOuschan = df['European_player'].str.contains('Albin Ouschan')\n\n\nWoodward = df['American_player'].str.contains('Woodward')\n\n\nsingles = df['Format']=='Singles'\ndoubles = df['Format']=='Doubles'\nteams = df['Format']=='Teams'\n\n\neurope_won = df['Europe_won'] == True\namerica_won = df['Europe_won'] == False\n\n\ndef singleswinloss(player,country):\n    if 'a' in country:\n        dfnew= df[df['American_player'].str.contains(player)]\n        win=dfnew[america_won&singles].shape[0]\n        loss=dfnew[player&~america_won&singles].shape[0]\n    else:\n        dfnew = df[df['European_player'].str.contains(player)]\n        loss=dfnew[player&america_won&singles].shape[0]\n        win=dfnew[player&~america_won&singles].shape[0]        \n    wl='{}-{}'.format(win,loss)\n    return(wl)\ndef doubleswinloss(player,country):\n    if 'a' in country:\n        win=df[player&america_won&doubles].shape[0]\n        loss=df[player&~america_won&doubles].shape[0]\n    else:\n        loss=df[player&america_won&doubles].shape[0]\n        win=df[player&~america_won&doubles].shape[0] \n    wl='{}-{}'.format(win,loss)\n    return(wl)\ndef combinedwinloss(player,country):\n    if 'a' in country:\n        dwin=df[player&america_won&doubles].shape[0]\n        dloss=df[player&~america_won&doubles].shape[0]\n        swin=df[player&america_won&singles].shape[0]\n        sloss=df[player&~america_won&singles].shape[0]\n    else:\n        dloss=df[player&america_won&doubles].shape[0]\n        dwin=df[player&~america_won&doubles].shape[0]\n        sloss=df[player&america_won&singles].shape[0]\n        swin=df[player&~america_won&singles].shape[0]\n    win=dwin+swin\n    loss=dloss+sloss\n    wl='{}-{}'.format(win,loss)\n    return(wl)\n\nsingleswinloss('Earl','am')     \n\nprint(singleswinloss(Ouschan,'eu'),doubleswinloss(Ouschan,'eu'),combinedwinloss(Ouschan,'eu'))\n\n\n# Need to get full player list for both teams\n\n\nwith open('euro_players_scrape.txt', 'r') as rf:\n    euro_players=[]\n    for line in rf:\n        n=line.split('  ')\n        euro_players.append(n[0])\nwith open('am_players_scrape.txt', 'r') as rf:\n    am_players=[]\n    for line in rf:\n        n=line.split('  ')\n        am_players.append(n[0])\n\n\n",
			"file": "/C/Users/andrew/Desktop/mosconi.py",
			"file_size": 6248,
			"file_write_time": 131431064699316121,
			"settings":
			{
				"buffer_size": 5958,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/andrew/Desktop/my_fcns.py",
			"settings":
			{
				"buffer_size": 2038,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/andrew/Desktop/mosconi/new_inc_2015_fixed",
			"settings":
			{
				"buffer_size": 64130,
				"encoding": "Hexadecimal",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Anaconda Python Builder",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Anaconda Python Builder",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 279.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"run curr",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"",
				"SublimeREPL: Python - RUN current file"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Disable Package"
			],
			[
				"Snippet: ",
				"Snippet: strrep"
			],
			[
				"Package Control: i",
				"Package Control: Install Package"
			],
			[
				"Anaconda:",
				"Anaconda: Disable linting on this file"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 696.0
	},
	"console":
	{
		"height": 561.0,
		"history":
		[
			"sublime.log_commands(False)",
			"sublime.log_commands(True)",
			"sublime.log_commands(False)",
			"sublime.log_commands(false)",
			"sublime.log_commands(True)",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/andrew/Desktop/mosconi"
	],
	"file_history":
	[
		"/C/module/fcns/my_fcns.py",
		"/C/Users/andrew/Desktop/mosconi/mosconisoup.py",
		"/C/Users/andrew/Desktop/mosconi/web scraping tut/1.+Web+Scraping.py",
		"/C/Users/andrew/Desktop/1.+Web+Scraping.py",
		"/C/Users/andrew/Desktop/wiki-table-scrape-master/test_wikitablescrape.py",
		"/C/Users/andrew/Desktop/readme",
		"/C/Users/andrew/Desktop/my_fcns.py",
		"/C/Users/andrew/Desktop/mosconi/mosconi/spiders/example.py",
		"/C/Users/andrew/Desktop/mosconi/myspider.py",
		"/C/Users/andrew/Desktop/dmoz/dmoz/spiders/myspider.py",
		"/C/Users/andrew/Desktop/mosconi/README.txt",
		"/C/Program Files (x86)/Kodi/system/keymaps/keyboard.xml",
		"/C/Program Files (x86)/Kodi/userdata/keymaps/keyboards.xml",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/python2.7.sublime-build",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/Anaconda.sublime-build",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
		"/C/Users/andrew/Desktop/Ahk original scripts/py2scrapy.sublime-build",
		"/C/Users/andrew/Desktop/Public-AutoHotKey-Scripts-master/Public-AutoHotKey-Scripts-master/GUI/UserCommands.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/globalhotstrings.ahk",
		"/C/Users/andrew/Desktop/ig_clone_data.sql",
		"/C/Users/andrew/Desktop/Ahk original scripts/localhotkeys.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/globalhotkeys.ahk",
		"/C/Users/andrew/Desktop/app3-website-blocker.py",
		"/C/Windows/System32/drivers/etc/hosts",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/2to3_nb.py",
		"/C/Users/andrew/Desktop/Ahk original scripts/COMMIT_EDITMSG.COMMIT_EDITMSG",
		"/C/Users/andrew/Desktop/Ahk original scripts/pga.ahk",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/peds.sublime-snippet",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/hotspot.sublime-snippet",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/ped.sublime-snippet",
		"/C/Users/andrew/Desktop/Hotstrings-Script.ahk",
		"/C/Users/andrew/Desktop/MyScript.ahk",
		"/C/Users/andrew/Desktop/getkeyinfo.ahk",
		"/C/Users/andrew/Desktop/newmouse.ahk",
		"/C/Users/andrew/Desktop/Ahk playground/newmouse.ahk",
		"/C/Users/andrew/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/reload4.ahk",
		"/C/Users/andrew/AppData/Roaming/Microsoft/Windows/Start Menu/Programs/Startup/boil.ahk",
		"/C/Users/andrew/Desktop/Ahk playground/Gui-Script2.ahk",
		"/C/Users/andrew/Desktop/Ahk playground/Gui/Gui-Script (1).ahk",
		"/C/Users/andrew/Desktop/Ahk playground/Gui/Gui-Script.ahk",
		"/C/Users/andrew/Desktop/Ahk playground/Gui-Script.ahk",
		"/C/Users/andrew/Desktop/Ahk playground/OnClipboardChange-Script.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/ahk-edit.sublime-project",
		"/C/Users/andrew/Desktop/Ahk",
		"/C/Users/andrew/Desktop/Public-AutoHotKey-Scripts-master/Public-AutoHotKey-Scripts-master/Host.ahk",
		"/C/Users/andrew/Desktop/localhotkeys.ahk",
		"/C/Users/andrew/Desktop/Public-AutoHotKey-Scripts-master/Public-AutoHotKey-Scripts-master/original",
		"/C/Users/andrew/Desktop/Public-AutoHotKey-Scripts-master/Public-AutoHotKey-Scripts-master/scripts/localhotkeys.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/Other's scripts/AutoCorrect.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/combinefiles.py",
		"/C/Users/andrew/Desktop/Ahk original scripts/wrapquotes.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/msword.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/gitbashpaste.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/epicpen.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/spotify.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/ahkworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/drawboardworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/myspeedworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/onenoteworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/pptworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/skypeworks.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/remaps.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/ytchannel.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/mousewheel.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/minimize.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/homeend.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/google.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/usercommandhelp.txt",
		"/C/Users/andrew/Desktop/Ahk original scripts/gitbash.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/sublime.ahk",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/boil.sublime-snippet",
		"/C/Users/andrew/Desktop/Ahk original scripts/newfile.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/hotspot.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/backduplicate.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/newp.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/sunset.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/printact.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/works.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/AutoCorrect.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/alwaysontop.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/combineremaps.py",
		"/C/Users/andrew/Desktop/Ahk original scripts/remap insert to appskey.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/remap ctrl.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/remap appskey.ahk",
		"/C/Users/andrew/Desktop/Ahk original scripts/Product Review.ahk",
		"/C/Users/andrew/Desktop/code/Day_of_week/dowc.py",
		"/C/Users/andrew/Desktop/code/Day_of_week/playg.py",
		"/C/Users/andrew/Desktop/code/Day_of_week/leap.py",
		"/C/Users/andrew/Desktop/code/Day_of_week/argparseexample.py",
		"/C/Users/andrew/AppData/Roaming/Sublime Text 3/Packages/User/SideBarEnhancements/Open With/Side Bar.sublime-menu",
		"/C/Users/andrew/Desktop/code/Days_of_week/dowc.py",
		"/C/Users/andrew/Desktop/code/Days_of_week/Day-of-the-Week-Calculator/dayofweekcalculator.py",
		"/C/Users/andrew/Desktop/Sample-Files/osexample.py",
		"/C/Users/andrew/Desktop/Sample-Files/merger.py",
		"/C/Users/andrew/Desktop/code/Days_of_week/Day-of-the-Week-Calculator/leap.py",
		"/C/Users/andrew/Desktop/Python Mega Course/new file.py",
		"/C/Users/andrew/Desktop/code/foobar/Level 1/brailleTranslator.py",
		"/C/Users/andrew/Desktop/code/foobar/Level 2/anyBase.py",
		"/C/Users/andrew/Desktop/code/dataWrangling/xlrd.py",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/foobar/anybase.py",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/CrackSAT/idnums.txt",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/python learning.sublime-project",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/python to access web coursera.sublime-project",
		"/C/Users/andrew/AppData/Local/Programs/Python/Python35/scraphalls.py",
		"/C/Users/andrew/Links/Python35.lnk",
		"/C/Users/andrew/Desktop/Days_of_week/Day-of-the-Week-Calculator/dayofweekcalculator.py",
		"/C/Users/andrew/Desktop/googlefoo/imgs.py",
		"/C/Users/andrew/Desktop/googlefoo/pg.py",
		"/C/Users/andrew/Desktop/googlefoo/playg.py",
		"/C/Users/andrew/Desktop/Days_of_week/googlefoo/imgs.py",
		"/C/Users/andrew/Desktop/Days_of_week/dayofweek.py",
		"/C/Users/andrew/Desktop/googlefoo/googlefoo.py",
		"/C/Program Files/Sublime Text 3/naif1.py",
		"/C/Users/andrew/Desktop/googlefoo/dayofweek.py",
		"/C/Program Files/Sublime Text 3/starcars.py",
		"/C/Users/andrew/Desktop/googlefoo/Demographic_Statistics_By_Zip_Code.py",
		"/C/Users/andrew/Desktop/MNIST data/playg.py",
		"/C/Users/andrew/Desktop/MNIST data/knn_mnist.py",
		"/C/Users/andrew/Desktop/table1.xls",
		"/C/Users/andrew/Desktop/Myers-briggs project/chasefiles.py",
		"/C/Users/andrew/Desktop/chase/chase3.txt",
		"/C/Users/andrew/Desktop/chase/c1.txt",
		"/C/Users/andrew/Desktop/Myers-briggs project/Q-e Support Group That Each Myers-Briggs Personality Type Needs.txt",
		"/C/Users/andrew/Desktop/Myers-briggs project/briggs_formater.py",
		"/C/Users/andrew/Desktop/Myers-briggs project/play.py",
		"/C/Users/andrew/Desktop/Myers-briggs project/get_briggs_articles.py",
		"/C/Users/andrew/Desktop/Myers-briggs project/briggs_titles.txt",
		"/C/Users/andrew/Desktop/Myers-briggs project/get_briggs_urls.py"
	],
	"find":
	{
		"height": 61.0
	},
	"find_in_files":
	{
		"height": 138.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"tempo ",
			"<j>",
			"\\",
			"env",
			"cpl",
			"^WheelUp",
			"^WheelDown",
			"ped",
			"peds",
			"search",
			"mysp",
			"mbutton",
			"myspeed",
			"onenote",
			"#IfWinActive, ahk_class screenClass ",
			"#IfWinActive, ahk_class screenClass \n",
			"#IfWinActive, Drawboard PDF",
			"print",
			"type",
			"\\",
			"\\n",
			"/n",
			"\\",
			"Which Type Would You Rather Be",
			"p",
			"?",
			"Which Type Would You Rather Be?",
			"\\",
			"bach",
			"contest",
			"\\",
			"Nirvana",
			"while",
			"or",
			"print",
			"to",
			"fro",
			"fro,to",
			"arr",
			"dic_rc34",
			"matrix34",
			"print",
			"cum",
			"self_looped",
			"ind",
			"temp",
			"ans",
			"print",
			"run_q=",
			"print",
			"terms",
			"prod_d",
			"cur_val",
			"cur_d",
			"elem",
			"t",
			"t2",
			"ind",
			"subind",
			"test",
			"alistmeldtrim",
			"Subject",
			"line",
			"Line",
			"line",
			"array1",
			"full",
			"content_from_web",
			"=",
			"newmeld",
			">>",
			"\"",
			"input",
			"trans",
			"=== Plugin Name ===\nContributors: (this should be a list of wordpress.org userid's)\nDonate link: http://example.com/\nTags: comments, spam\nRequires at least: 4.6\nTested up to: 4.7",
			"chunk_size"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"/",
			"\\\\",
			"/",
			"\\n",
			"/",
			"Metallica",
			",",
			"(x2,y2)",
			"(x1,y1)",
			"path",
			"t",
			"dic_t",
			"t",
			"row_num",
			"ind",
			"prev_row_temp",
			"num_terminals",
			"r_denom",
			"r_num",
			"prod_d",
			"row",
			"t",
			"i",
			"j",
			"array",
			"alistmeldtrim2",
			"array",
			"",
			" = ",
			"meld_trim",
			">",
			"",
			"plaintext",
			"answer"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/andrew/Desktop/mosconi/manual_scrape_cleaned_2014.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 902,
						"regions":
						{
						},
						"selection":
						[
							[
								902,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/andrew/Desktop/mosconi/euro_players_scrape.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 907,
						"regions":
						{
						},
						"selection":
						[
							[
								252,
								252
							]
						],
						"settings":
						{
							"auto_name": "Ralf Souquet     Germany",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/andrew/Desktop/mosconi/am_players_scrape.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1064,
						"regions":
						{
						},
						"selection":
						[
							[
								221,
								221
							]
						],
						"settings":
						{
							"auto_name": "Johnny Archer    Georgia",
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/andrew/Desktop/mosconi/split_players.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 311,
						"regions":
						{
						},
						"selection":
						[
							[
								311,
								0
							]
						],
						"settings":
						{
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/C/Users/andrew/Desktop/mosconi.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5958,
						"regions":
						{
						},
						"selection":
						[
							[
								5955,
								5662
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 9348.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/C/Users/andrew/Desktop/my_fcns.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2038,
						"regions":
						{
						},
						"selection":
						[
							[
								374,
								223
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										373,
										374
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/round_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										368,
										369
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 164.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/C/Users/andrew/Desktop/mosconi/new_inc_2015_fixed",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 64130,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 49.0
	},
	"input":
	{
		"height": 43.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 653.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 268.0
	},
	"pinned_build_system": "Packages/Python/Python.sublime-build",
	"project": "mosconi.sublime-project",
	"replace":
	{
		"height": 94.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"ivyleagues.py"
			],
			[
				"my",
				"my_fcns.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 503.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
